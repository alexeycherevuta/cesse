import { Client, Props } from '../../..'
import { prismicSinglePageApplicationPayload } from '../../support/prismicFactory'

jest.mock('prismic-javascript')
const prismicMock = require('prismic-javascript')
prismicMock.getApi = jest.fn().mockImplementation(() => 'bar')

const PrismicPlugin = Client.Plugins.Prismic

describe('Plugin: Prismic', () => {

  describe('SinglePageApplication schema', () => {

    const prismic = new PrismicPlugin({
      url: 'http://fake-prismic-repo.url.com',
      token: 'fake-prismic-token'
    })

    beforeAll(() => {
      jest.spyOn(prismicMock, 'getApi').mockImplementation(() => {
        return new Promise((resolve) => {
          resolve({
            query: jest.fn().mockImplementation(() => {
              return prismicSinglePageApplicationPayload()
            })
          })
        })
      })
    })

    it('correctly returns a mocked response', async () => {
      await prismic.fetch(Props.PrismicProjectSchemas.SinglePageApplication)
      const data = prismic.version
      
      expect(data).toHaveProperty('page')
      expect(data).toHaveProperty('results')
      expect(data).toHaveProperty('version')
    })
  })

})